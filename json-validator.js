const fs = require('fs');
const path = require('path');

class JSONValidator {
    constructor() {
        this.errors = [];
        this.fixes = [];
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞
     */
    validateAndFix(filePath) {
        console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${filePath}`);

        if (!fs.existsSync(filePath)) {
            console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            return false;
        }

        let content = fs.readFileSync(filePath, 'utf8');
        const originalContent = content;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        content = this.removeUnnecessaryBrackets(content);
        content = this.removeJunkLines(content);
        content = this.fixIncorrectContentEscaping(content);
        content = this.fixBrokenMultilineContent(content);
        content = this.fixQuotesInText(content);
        content = this.fixQuotes(content);
        // content = this.fixEscaping(content); // –û—Ç–∫–ª—é—á–µ–Ω–æ - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ fixQuotes
        content = this.fixMissingCommas(content);
        content = this.validateJSONStructure(content);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (content !== originalContent) {
            const backupPath = filePath + '.backup';
            fs.writeFileSync(backupPath, originalContent);
            console.log(`üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupPath}`);

            fs.writeFileSync(filePath, content);
            console.log(`‚úÖ –§–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω: ${filePath}`);

            this.printSummary();
        } else {
            console.log(`‚úÖ –§–∞–π–ª —É–∂–µ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${filePath}`);
        }

        return true;
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏ ] –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤ –æ–±—ä–µ–∫—Ç–∞—Ö
     */
    removeUnnecessaryBrackets(content) {
        const lines = content.split('\n');
        const fixedLines = [];

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const trimmedLine = line.trim();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ª–∏—à–Ω–µ–π –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π —Å–∫–æ–±–∫–æ–π
            if (trimmedLine === ']') {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - —Å–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
                let shouldRemove = false;

                // –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫
                for (let j = i + 1; j < Math.min(i + 5, lines.length); j++) {
                    const nextLine = lines[j].trim();
                    if (nextLine === '') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

                    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {, —ç—Ç–æ –ª–∏—à–Ω—è—è —Å–∫–æ–±–∫–∞
                    if (nextLine.startsWith('{') || nextLine.startsWith('"ID"')) {
                        shouldRemove = true;
                        break;
                    }

                    // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –Ω–µ —É–¥–∞–ª—è–µ–º
                    if (nextLine === ']' || nextLine === '}') {
                        break;
                    }
                }

                if (shouldRemove) {
                    this.fixes.push(`–£–¥–∞–ª–µ–Ω–∞ –ª–∏—à–Ω—è—è ] –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
                    continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
                }
            }

            fixedLines.push(line);
        }

        return fixedLines.join('\n');
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –º—É—Å–æ—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å json, Generated json, ```json
     */
    removeJunkLines(content) {
        const lines = content.split('\n');
        const fixedLines = [];

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const trimmedLine = line.trim();

            // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º—É—Å–æ—Ä–æ–º
            if (trimmedLine === '```json' ||
                trimmedLine === 'Generated json' ||
                trimmedLine === '```' ||
                trimmedLine === 'json') {
                this.fixes.push(`–£–¥–∞–ª–µ–Ω–∞ –º—É—Å–æ—Ä–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ ${i + 1}: "${trimmedLine}"`);
                continue;
            }

            fixedLines.push(line);
        }

        return fixedLines.join('\n');
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –≤ JSON
     */
    fixQuotes(content) {
        console.log('üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ JSON...');

        // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º HTML –∫–∞–≤—ã—á–∫–∏ –≤ Content –ø–æ–ª—è—Ö
        let fixedContent = this.fixHTMLQuotesInContent(content);

        // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
        fixedContent = this.fixUnpairedQuotes(fixedContent);

        return fixedContent;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø–æ–ª—è—Ö Content
     */
    fixIncorrectContentEscaping(content) {
        let fixedContent = content;
        let fixCount = 0;

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–∏, –≥–¥–µ Content –ø–æ–ª–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å \"
        // "Content": \"<h1>... -> "Content": "<h1>...
        fixedContent = fixedContent.replace(/"Content":\s*\\"/g, (match) => {
            fixCount++;
            return '"Content": "';
        });

        if (fixCount > 0) {
            this.fixes.push(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ ${fixCount} –ø–æ–ª—è—Ö Content`);
        }

        return fixedContent;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–æ–º–∞–Ω–Ω—ã–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ Content –ø–æ–ª—è
     */
    fixBrokenMultilineContent(content) {
        const lines = content.split('\n');
        const fixedLines = [];
        let fixCount = 0;
        let inBrokenContent = false;
        let contentBuffer = '';

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const trimmedLine = line.trim();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å Content –ø–æ–ª—è
            if (trimmedLine.includes('"Content":')) {
                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ (–Ω–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π –∫–∞–≤—ã—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π)
                if (!trimmedLine.match(/",\s*$/) && !trimmedLine.match(/"\s*$/) && trimmedLine.includes('<')) {
                    inBrokenContent = true;
                    contentBuffer = line;
                    continue;
                }
            }

            // –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ Content –ø–æ–ª—è
            if (inBrokenContent) {
                contentBuffer += ' ' + line.trim();

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
                if (trimmedLine.includes('"IMG":') || trimmedLine.includes('"ID":') ||
                    trimmedLine.startsWith('}') || trimmedLine.startsWith('{')) {

                    // –ó–∞–≤–µ—Ä—à–∞–µ–º Content –ø–æ–ª–µ
                    const contentMatch = contentBuffer.match(/^(\s*"Content":\s*")(.*?)(\s*)$/);
                    if (contentMatch) {
                        const [, prefix, content, suffix] = contentMatch;
                        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É –∏ –∑–∞–ø—è—Ç—É—é
                        const fixedContentLine = prefix + content + '",';
                        fixedLines.push(fixedContentLine);
                        fixCount++;
                        this.fixes.push(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–æ–º–∞–Ω–Ω–æ–µ Content –ø–æ–ª–µ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
                    }

                    inBrokenContent = false;
                    contentBuffer = '';

                    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
                    fixedLines.push(line);
                } else {
                    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–±–∏—Ä–∞—Ç—å Content
                    continue;
                }
            } else {
                fixedLines.push(line);
            }
        }

        return fixedLines.join('\n');
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª—É—á–∞–∏ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–µ
     */
    fixQuotesInText(content) {
        let fixedContent = content;
        let fixCount = 0;

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ, –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        const specificFixes = [
            // –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ "don't ask, don't tell"
            {
                pattern: /"don't ask, don't tell"/g,
                replacement: '\\"don\'t ask, don\'t tell\\"'
            }
        ];

        specificFixes.forEach(({ pattern, replacement }) => {
            const matches = fixedContent.match(pattern);
            if (matches) {
                fixedContent = fixedContent.replace(pattern, replacement);
                fixCount += matches.length;
                this.fixes.push(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ —Å –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏: ${matches.length} —Å–ª—É—á–∞–µ–≤`);
            }
        });

        return fixedContent;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ HTML –∞—Ç—Ä–∏–±—É—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª—è—Ö Content
     */
    fixHTMLQuotesInContent(content) {
        let fixedContent = content;
        let fixCount = 0;

        // –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º HTML –∫–∞–≤—ã—á–∫–∏ –≤–æ –≤—Å–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
        // –ò—â–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ HTML –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        fixedContent = fixedContent.replace(/(?<!\\)(\w+)="([^"]*)"/g, (attrMatch, attrName, attrValue) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—è Content
            // –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∞–º–∏ –µ—Å—Ç—å "Content":, —Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
            fixCount++;
            return `${attrName}=\\"${attrValue}\\"`;
        });

        if (fixCount > 0) {
            this.fixes.push(`–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–≤—ã—á–∫–∏ –≤ ${fixCount} HTML –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –≤ –ø–æ–ª—è—Ö Content`);
        }

        return fixedContent;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–ø–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
     */
    fixUnpairedQuotes(content) {
        const lines = content.split('\n');
        let fixedLines = [];
        let fixCount = 0;

        for (let i = 0; i < lines.length; i++) {
            let line = lines[i];
            const originalLine = line;

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
            const quotes = this.countUnescapedQuotes(line);

            // –ï—Å–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–≤—ã—á–µ–∫, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            if (quotes % 2 !== 0) {
                // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å Content –∏ –æ–Ω–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                if (line.includes('"Content":')) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—É—é –∫–∞–≤—ã—á–∫—É
                    line = this.fixContentLineQuotes(line);
                    if (line !== originalLine) {
                        fixCount++;
                        this.fixes.push(`–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–µ–ø–∞—Ä–Ω–∞—è –∫–∞–≤—ã—á–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
                    } else {
                        this.errors.push(`–ù–µ–ø–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${line.substring(0, 100)}...`);
                    }
                } else {
                    this.errors.push(`–ù–µ–ø–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}: ${line.substring(0, 100)}...`);
                }
            }

            fixedLines.push(line);
        }

        if (fixCount > 0) {
            console.log(`‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixCount} —Å—Ç—Ä–æ–∫ —Å –Ω–µ–ø–∞—Ä–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏`);
        }

        return fixedLines.join('\n');
    }

    /**
     * –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–≤—ã—á–µ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
     */
    countUnescapedQuotes(line) {
        let count = 0;
        let escaped = false;

        for (let i = 0; i < line.length; i++) {
            const char = line[i];

            if (escaped) {
                escaped = false;
                continue;
            }

            if (char === '\\') {
                escaped = true;
                continue;
            }

            if (char === '"') {
                count++;
            }
        }

        return count;
    }

    /**
     * –ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–∞–≤—ã—á–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Å Content
     */
    fixContentLineQuotes(line) {
        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç Content –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if (line.includes('"Content":') && !line.match(/",\s*$/)) {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞–≤—ã—á–∫—É –∏ –¥–æ–±–∞–≤–∏—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            let fixed = line;

            // –ü—Ä–æ—Å—Ç–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ", –∏–ª–∏ "},
            // –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞–≤—ã—á–∫—É –≤ –∫–æ–Ω—Ü–µ
            if (!fixed.endsWith('",') && !fixed.endsWith('"}')) {
                // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞–≤—ã—á–∫—É
                for (let i = fixed.length - 1; i >= 0; i--) {
                    if (fixed[i] === '"' && (i === 0 || fixed[i-1] !== '\\')) {
                        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞ –ø–æ–ª—è, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –µ—ë
                        if (i < fixed.length - 1) {
                            fixed = fixed.substring(0, i) + '\\"' + fixed.substring(i + 1);
                            break;
                        }
                    }
                }
            }

            return fixed;
        }

        return line;
    }



    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ –≤ HTML –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
     */
    fixEscaping(content) {
        // –ü–†–ê–í–ò–õ–¨–ù–û: –í JSON —Å—Ç—Ä–æ–∫–∞—Ö –∫–∞–≤—ã—á–∫–∏ –≤ HTML –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
        // href="url" -> href=\"url\"
        let fixed = content;
        let fixCount = 0;

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ href –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // href="https://example.com" -> href=\"https://example.com\"
        // –ò—â–µ–º href= –ë–ï–ó —ç–∫—Ä–∞–Ω–∏—Ä—É—é—â–µ–≥–æ —Å–ª–µ—à–∞ –ø–µ—Ä–µ–¥ –∫–∞–≤—ã—á–∫–æ–π
        const hrefMatches = fixed.match(/href="[^"]*"/g);
        if (hrefMatches) {
            // –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É: href=" –Ω–∞ href=\"
            // –ò —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É: " –Ω–∞ \"
            fixed = fixed.replace(/href="([^"]*)"/g, 'href=\\"$1\\"');
            fixCount += hrefMatches.length;
        }

        // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–µ—à–∏ - –µ—Å–ª–∏ –≤–∏–¥–∏–º –¥–≤–∞ —Å–ª–µ—à–∞ –ø–æ–¥—Ä—è–¥, —É–¥–∞–ª—è–µ–º –æ–¥–∏–Ω
        // href=\"url\\"> -> href=\"url\">
        const doubleSlashMatches = fixed.match(/href=\\"[^"]*\\\\"/g);
        if (doubleSlashMatches) {
            fixed = fixed.replace(/href=\\"([^"]*)\\\\"/g, 'href=\\"$1\\"');
            fixCount += doubleSlashMatches.length;
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è rel="noopener noreferrer"
        // rel=\"noopener noreferrer" -> rel=\"noopener noreferrer\"
        const relNoopenerMatches = fixed.match(/rel=\\"noopener noreferrer"/g);
        if (relNoopenerMatches) {
            fixed = fixed.replace(/rel=\\"noopener noreferrer"/g, 'rel=\\"noopener noreferrer\\"');
            fixCount += relNoopenerMatches.length;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ target –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // target="_blank" -> target=\"_blank\"
        const targetMatches = fixed.match(/(?<!\\)target="[^"]*"(?!\s*>)/g);
        if (targetMatches) {
            fixed = fixed.replace(/(?<!\\)target="([^"]*)"(?!\s*>)/g, 'target=\\"$1\\"');
            fixCount += targetMatches.length;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ rel –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // rel="noopener" -> rel=\"noopener\"
        const relMatches = fixed.match(/(?<!\\)rel="[^"]*"(?!\s*>)/g);
        if (relMatches) {
            fixed = fixed.replace(/(?<!\\)rel="([^"]*)"(?!\s*>)/g, 'rel=\\"$1\\"');
            fixCount += relMatches.length;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ class –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // class="example" -> class=\"example\"
        const classMatches = fixed.match(/class="[^"]*"(?!\s*>)/g);
        if (classMatches) {
            fixed = fixed.replace(/class="([^"]*)"(?!\s*>)/g, 'class=\\"$1\\"');
            fixCount += classMatches.length;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ id –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // id="example" -> id=\"example\"
        const idMatches = fixed.match(/id="[^"]*"(?!\s*>)/g);
        if (idMatches) {
            fixed = fixed.replace(/id="([^"]*)"(?!\s*>)/g, 'id=\\"$1\\"');
            fixCount += idMatches.length;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ src –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // src="/images/example.jpg" -> src=\"/images/example.jpg\"
        const srcMatches = fixed.match(/src="[^"]*"(?!\s*>)/g);
        if (srcMatches) {
            fixed = fixed.replace(/src="([^"]*)"(?!\s*>)/g, 'src=\\"$1\\"');
            fixCount += srcMatches.length;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ alt –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // alt="description" -> alt=\"description\"
        const altMatches = fixed.match(/alt="[^"]*"(?!\s*>)/g);
        if (altMatches) {
            fixed = fixed.replace(/alt="([^"]*)"(?!\s*>)/g, 'alt=\\"$1\\"');
            fixCount += altMatches.length;
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ style –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
        // style="color: red;" -> style=\"color: red;\"
        const styleMatches = fixed.match(/style="[^"]*"(?!\s*>)/g);
        if (styleMatches) {
            fixed = fixed.replace(/style="([^"]*)"(?!\s*>)/g, 'style=\\"$1\\"');
            fixCount += styleMatches.length;
        }

        if (fixCount > 0) {
            this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è ${fixCount} HTML –∞—Ç—Ä–∏–±—É—Ç–æ–≤`);
        }

        return fixed;
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—è—Ç—ã–µ –ø–æ—Å–ª–µ JSON –æ–±—ä–µ–∫—Ç–æ–≤
     */
    fixMissingCommas(content) {
        const lines = content.split('\n');
        const fixedLines = [];
        let fixCount = 0;

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const trimmedLine = line.trim();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ } (–∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –æ–±—ä–µ–∫—Ç–∞)
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏–º–µ—é—Ç –∑–∞–ø—è—Ç—É—é –∏–ª–∏ —è–≤–ª—è—é—Ç—Å—è —á–∞—Å—Ç—å—é –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            if (trimmedLine.endsWith('}') && !trimmedLine.endsWith(',') && !trimmedLine.endsWith('},')) {
                // –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
                let nextObjectFound = false;
                for (let j = i + 1; j < lines.length; j++) {
                    const nextLine = lines[j].trim();

                    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if (nextLine === '') continue;

                    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å { - —ç—Ç–æ –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                    if (nextLine.startsWith('{')) {
                        nextObjectFound = true;
                        break;
                    }

                    // –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ (], }, –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫
                    if (nextLine.startsWith(']') || nextLine.startsWith('}')) {
                        break;
                    }

                    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç JSON —Å–≤–æ–π—Å—Ç–≤–∞, –Ω–æ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å {,
                    // —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    if (nextLine.includes(':') && !nextLine.startsWith('{')) {
                        break;
                    }
                }

                // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é
                if (nextObjectFound) {
                    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—è—Ç—É—é –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ (–ø–µ—Ä–µ–¥ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
                    const modifiedLine = line.replace(/}(\s*)$/, '},$1');
                    fixedLines.push(modifiedLine);
                    fixCount++;
                    this.fixes.push(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è –ø–æ—Å–ª–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ ${i + 1}`);
                } else {
                    fixedLines.push(line);
                }
            } else {
                fixedLines.push(line);
            }
        }

        if (fixCount > 0) {
            console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${fixCount} –∑–∞–ø—è—Ç—ã—Ö –ø–æ—Å–ª–µ JSON –æ–±—ä–µ–∫—Ç–æ–≤`);
        }

        return fixedLines.join('\n');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
     */
    validateJSONStructure(content) {
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            JSON.parse(content);
            console.log('‚úÖ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        } catch (error) {
            this.errors.push(`–û—à–∏–±–∫–∞ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${error.message}`);
            console.log(`‚ùå –û—à–∏–±–∫–∞ JSON: ${error.message}`);
        }

        return content;
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –æ—à–∏–±–æ–∫
     */
    printSummary() {
        console.log('\nüìä –°–í–û–î–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
        console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${this.fixes.length}`);
        console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${this.errors.length}`);

        if (this.fixes.length > 0) {
            console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
            this.fixes.slice(0, 10).forEach((fix, index) => {
                console.log(`  ${index + 1}. ${fix}`);
            });
            if (this.fixes.length > 10) {
                console.log(`  ... –∏ –µ—â–µ ${this.fixes.length - 10} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π`);
            }
        }

        if (this.errors.length > 0) {
            console.log('\n‚ö†Ô∏è  –û—à–∏–±–∫–∏ (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10):');
            this.errors.slice(0, 10).forEach((error, index) => {
                console.log(`  ${index + 1}. ${error}`);
            });
            if (this.errors.length > 10) {
                console.log(`  ... –∏ –µ—â–µ ${this.errors.length - 10} –æ—à–∏–±–æ–∫`);
            }
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        if (this.errors.length > 0) {
            console.log('‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–µ');
            console.log('‚Ä¢ –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–≤—ã—á–µ–∫ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º');
            console.log('‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞–≤—ã—á–∫–∏ –≤ HTML: " ‚Üí \\"');
        }

        if (this.fixes.length > 0) {
            console.log('‚Ä¢ –§–∞–π–ª —á–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω - —É–¥–∞–ª–µ–Ω—ã –ª–∏—à–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
            console.log('‚Ä¢ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞');
        }

        if (this.errors.length === 0 && this.fixes.length === 0) {
            console.log('‚Ä¢ JSON —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω! üéâ');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
function runValidator(filePath) {
    const validator = new JSONValidator();
    return validator.validateAndFix(filePath);
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const args = process.argv.slice(2);

    if (args.length === 0) {
        console.log('üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node json-validator.js <–ø—É—Ç—å-–∫-—Ñ–∞–π–ª—É>');
        console.log('üìñ –ü—Ä–∏–º–µ—Ä: node json-validator.js project-content.json');
        process.exit(1);
    }

    const filePath = args[0];
    const success = runValidator(filePath);

    if (!success) {
        process.exit(1);
    }
}

module.exports = { JSONValidator, runValidator };