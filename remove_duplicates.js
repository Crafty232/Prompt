#!/usr/bin/env node
/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ project-content.json
 * –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—é Slug
 */

const fs = require('fs');
const path = require('path');

function removeDuplicates(inputFile = 'project-content.json', outputFile = null) {
    try {
        console.log(`–ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª: ${inputFile}`);
        
        // –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π JSON —Ñ–∞–π–ª
        const data = JSON.parse(fs.readFileSync(inputFile, 'utf8'));
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} –∑–∞–ø–∏—Å–µ–π`);
        
        // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –≤—Å—Ç—Ä–µ—á–µ–Ω–Ω—ã—Ö —Å–ª–∞–≥–æ–≤
        const seenSlugs = new Set();
        const uniqueItems = [];
        const duplicateItems = [];
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º
        data.forEach((item, index) => {
            const slug = item.Slug;
            
            if (!slug) {
                console.warn(`‚ö†Ô∏è  –ó–∞–ø–∏—Å—å —Å ID ${item.ID || index} –Ω–µ –∏–º–µ–µ—Ç —Å–ª–∞–≥–∞`);
                uniqueItems.push(item);
                return;
            }
            
            if (seenSlugs.has(slug)) {
                // –≠—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                duplicateItems.push({
                    index: index,
                    id: item.ID,
                    slug: slug,
                    title: item.Title ? item.Title.substring(0, 50) + '...' : 'N/A'
                });
            } else {
                // –ü–µ—Ä–≤–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
                seenSlugs.add(slug);
                uniqueItems.push(item);
            }
        });
        
        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log('\n' + '='.repeat(60));
        console.log('–†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–î–ê–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í');
        console.log('='.repeat(60));
        console.log(`–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${data.length}`);
        console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${uniqueItems.length}`);
        console.log(`–£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateItems.length}`);
        
        if (duplicateItems.length > 0) {
            console.log('\n–£–î–ê–õ–ï–ù–ù–´–ï –î–£–ë–õ–ò–ö–ê–¢–´:');
            console.log('-'.repeat(40));
            duplicateItems.forEach(item => {
                console.log(`ID: ${item.id}, Slug: "${item.slug}"`);
                console.log(`  Title: ${item.title}`);
            });
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if (!outputFile) {
            const ext = path.extname(inputFile);
            const name = path.basename(inputFile, ext);
            const dir = path.dirname(inputFile);
            outputFile = path.join(dir, `${name}_unique${ext}`);
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const backupFile = inputFile.replace('.json', '_backup.json');
        fs.copyFileSync(inputFile, backupFile);
        console.log(`\n‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupFile}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        fs.writeFileSync(outputFile, JSON.stringify(uniqueItems, null, 2), 'utf8');
        console.log(`‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputFile}`);
        
        // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∑–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        console.log('\n' + '='.repeat(60));
        console.log('–í–ù–ò–ú–ê–ù–ò–ï: –•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª?');
        console.log('–î–ª—è –∑–∞–º–µ–Ω—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º --replace');
        console.log(`–ü—Ä–∏–º–µ—Ä: node remove_duplicates.js ${inputFile} --replace`);
        console.log('='.repeat(60));
        
        return {
            original: data.length,
            unique: uniqueItems.length,
            removed: duplicateItems.length,
            duplicates: duplicateItems
        };
        
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.error(`‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '${inputFile}' –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        } else if (error instanceof SyntaxError) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ JSON: ${error.message}`);
        } else {
            console.error(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        }
        return null;
    }
}

function replaceOriginalFile(inputFile, uniqueFile) {
    try {
        // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const timestampBackup = inputFile.replace('.json', `_backup_${timestamp}.json`);
        fs.copyFileSync(inputFile, timestampBackup);
        
        // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        fs.copyFileSync(uniqueFile, inputFile);
        
        console.log(`‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∑–∞–º–µ–Ω–µ–Ω`);
        console.log(`‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${timestampBackup}`);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        fs.unlinkSync(uniqueFile);
        console.log(`üóëÔ∏è  –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${uniqueFile}`);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ñ–∞–π–ª–∞: ${error.message}`);
    }
}

function main() {
    const args = process.argv.slice(2);
    const inputFile = args[0] || 'project-content.json';
    const shouldReplace = args.includes('--replace');
    
    console.log('üîß –°–ö–†–ò–ü–¢ –£–î–ê–õ–ï–ù–ò–Ø –î–£–ë–õ–ò–ö–ê–¢–û–í –°–õ–ê–ì–û–í');
    console.log('='.repeat(60));
    
    const result = removeDuplicates(inputFile);
    
    if (result && shouldReplace) {
        const ext = path.extname(inputFile);
        const name = path.basename(inputFile, ext);
        const dir = path.dirname(inputFile);
        const uniqueFile = path.join(dir, `${name}_unique${ext}`);
        
        console.log('\nüîÑ –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª...');
        replaceOriginalFile(inputFile, uniqueFile);
    }
    
    if (result) {
        console.log('\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        if (result.removed > 0) {
            console.log(`üìä –£–¥–∞–ª–µ–Ω–æ ${result.removed} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏–∑ ${result.original} –∑–∞–ø–∏—Å–µ–π`);
        } else {
            console.log('üéâ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Ñ–∞–π–ª —É–∂–µ —á–∏—Å—Ç—ã–π!');
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
